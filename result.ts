/* This file was generated by https://github.com/dested/serverless-client-builder */
/* tslint:disable */

export class ValidationError {
  constructor(public model: string, reason: 'missing' | 'mismatch' | 'too-many-fields', field: string) {}
}
export class RequestValidator {
  static SomeRequest_SomeRequestAnswer_shoesValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('SomeRequest_SomeRequestAnswer_shoes', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('SomeRequest_SomeRequestAnswer_shoes', 'mismatch', '');

    if ('foo' in model) {
      fieldCount++;
      if (typeof model.foo !== 'number')
        throw new ValidationError('SomeRequest_SomeRequestAnswer_shoes', 'mismatch', 'foo');
    }

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('SomeRequest_SomeRequestAnswer_shoes', 'too-many-fields', '');

    return true;
  }

  static SomeRequest_SomeRequestAnswerValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('SomeRequest_SomeRequestAnswer', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('SomeRequest_SomeRequestAnswer', 'mismatch', '');

    if (model.answerId === null) throw new ValidationError('SomeRequest_SomeRequestAnswer', 'missing', 'answerId');
    fieldCount++;
    if (typeof model.answerId !== 'string')
      throw new ValidationError('SomeRequest_SomeRequestAnswer', 'mismatch', 'answerId');
    if (model.decision === null) throw new ValidationError('SomeRequest_SomeRequestAnswer', 'missing', 'decision');
    fieldCount++;
    if (model.decision !== 'positive' && model.decision !== 'negative')
      throw new ValidationError('SomeRequest_SomeRequestAnswer', 'mismatch', 'decision');
    if (model.shoes === null) throw new ValidationError('SomeRequest_SomeRequestAnswer', 'missing', 'shoes');
    fieldCount++;
    this.SomeRequest_SomeRequestAnswer_shoesValidator(model.shoes);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('SomeRequest_SomeRequestAnswer', 'too-many-fields', '');

    return true;
  }

  static SomeRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('SomeRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('SomeRequest', 'mismatch', '');

    if (model.id === null) throw new ValidationError('SomeRequest', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('SomeRequest', 'mismatch', 'id');
    if (model.idn === null) throw new ValidationError('SomeRequest', 'missing', 'idn');
    fieldCount++;
    if (typeof model.idn !== 'number') throw new ValidationError('SomeRequest', 'mismatch', 'idn');
    if ('idnNull' in model) {
      fieldCount++;
      if (typeof model.idnNull !== 'number') throw new ValidationError('SomeRequest', 'mismatch', 'idnNull');
    }
    if (model.idb === null) throw new ValidationError('SomeRequest', 'missing', 'idb');
    fieldCount++;
    if (typeof model.idb !== 'boolean') throw new ValidationError('SomeRequest', 'mismatch', 'idb');
    if (model.idStArray === null) throw new ValidationError('SomeRequest', 'missing', 'idStArray');
    fieldCount++;
    if (typeof model.idStArray !== 'object' || !('length' in model.idStArray))
      throw new ValidationError('SomeRequest', 'mismatch', 'idStArray');
    for (let i = 0; i < model.idStArray.length; i++) {
      const idStArrayElem = model.idStArray[i];
      if (typeof idStArrayElem !== 'string') throw new ValidationError('SomeRequest', 'mismatch', 'idStArray');
    }
    if (model.answers === null) throw new ValidationError('SomeRequest', 'missing', 'answers');
    fieldCount++;
    if (typeof model.answers !== 'object' || !('length' in model.answers))
      throw new ValidationError('SomeRequest', 'mismatch', 'answers');
    for (let i = 0; i < model.answers.length; i++) {
      const answersElem = model.answers[i];
      this.SomeRequest_SomeRequestAnswerValidator(answersElem);
    }

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('SomeRequest', 'too-many-fields', '');

    return true;
  }
}



export interface SomeRequest {
  id: string;
  idn: number;
  idnNull?: number;
  idb: boolean;
  idStArray: string[];
  answers: SomeRequestAnswer[];
}
export interface SomeRequestAnswer {
  answerId: string;
  decision: 'positive' | 'negative';
  shoes: {foo?: number};
}

const someRequest = {
  id: 'foo',
  idb: true,
  answers: [
    {answerId: 'asdfb', decision: 'positive', shoes: {foo: 123}},
    {answerId: 'asdfb', decision: 'positive', shoes: {foo: 123}},
  ],
  idn: 12,
  idn: 12,
  idStArray: ['a', 'b', 'c'],
};

RequestValidator.SomeRequestValidator(someRequest);
