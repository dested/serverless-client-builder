/* This file was generated by https://github.com/dested/serverless-client-builder */
/* tslint:disable */

export class ValidationError {
  constructor(public model: string, reason: 'missing' | 'mismatch' | 'too-many-fields', field: string) {}
}
export class RequestValidator {
  static AdminLoginRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('AdminLoginRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('AdminLoginRequest', 'mismatch', '');

    if (model.email === null) throw new ValidationError('AdminLoginRequest', 'missing', 'email');
    fieldCount++;
    if (typeof model.email !== 'string') throw new ValidationError('AdminLoginRequest', 'mismatch', 'email');
    if (model.password === null) throw new ValidationError('AdminLoginRequest', 'missing', 'password');
    fieldCount++;
    if (typeof model.password !== 'string') throw new ValidationError('AdminLoginRequest', 'mismatch', 'password');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('AdminLoginRequest', 'too-many-fields', '');

    return true;
  }

  static AdminImpersonateRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('AdminImpersonateRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('AdminImpersonateRequest', 'mismatch', '');

    if (model.userId === null) throw new ValidationError('AdminImpersonateRequest', 'missing', 'userId');
    fieldCount++;
    if (typeof model.userId !== 'string') throw new ValidationError('AdminImpersonateRequest', 'mismatch', 'userId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('AdminImpersonateRequest', 'too-many-fields', '');

    return true;
  }

  static AdminGetAllRelationshipsRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('AdminGetAllRelationshipsRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('AdminGetAllRelationshipsRequest', 'mismatch', '');

    if (model.page === null) throw new ValidationError('AdminGetAllRelationshipsRequest', 'missing', 'page');
    fieldCount++;
    if (typeof model.page !== 'string')
      throw new ValidationError('AdminGetAllRelationshipsRequest', 'mismatch', 'page');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('AdminGetAllRelationshipsRequest', 'too-many-fields', '');

    return true;
  }

  static VoidRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('VoidRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('VoidRequest', 'mismatch', '');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('VoidRequest', 'too-many-fields', '');

    return true;
  }

  static AdminGetPersonalityLinkRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('AdminGetPersonalityLinkRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('AdminGetPersonalityLinkRequest', 'mismatch', '');

    if (model.personalityLinkId === null)
      throw new ValidationError('AdminGetPersonalityLinkRequest', 'missing', 'personalityLinkId');
    fieldCount++;
    if (typeof model.personalityLinkId !== 'string')
      throw new ValidationError('AdminGetPersonalityLinkRequest', 'mismatch', 'personalityLinkId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('AdminGetPersonalityLinkRequest', 'too-many-fields', '');

    return true;
  }

  static HttpPersonalityLinkAnswerValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', '');

    if (model.answerId === null) throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', 'answerId');
    fieldCount++;
    if (typeof model.answerId !== 'string')
      throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'answerId');
    if (model.text === null) throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', 'text');
    fieldCount++;
    if (typeof model.text !== 'string') throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'text');
    if (model.positiveResponse === null)
      throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', 'positiveResponse');
    fieldCount++;
    if (typeof model.positiveResponse !== 'string')
      throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'positiveResponse');
    if (model.negativeResponse === null)
      throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', 'negativeResponse');
    fieldCount++;
    if (typeof model.negativeResponse !== 'string')
      throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'negativeResponse');
    if (model.tags === null) throw new ValidationError('HttpPersonalityLinkAnswer', 'missing', 'tags');
    fieldCount++;
    if (typeof model.tags !== 'object' || !('length' in model.tags))
      throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'tags');
    for (let i = 0; i < model.tags.length; i++) {
      const tagsElem = model.tags[i];
      if (typeof tagsElem !== 'string') throw new ValidationError('HttpPersonalityLinkAnswer', 'mismatch', 'tags');
    }

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpPersonalityLinkAnswer', 'too-many-fields', '');

    return true;
  }

  static HttpPersonalityLinkValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpPersonalityLink', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpPersonalityLink', 'mismatch', '');

    if (model.id === null) throw new ValidationError('HttpPersonalityLink', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('HttpPersonalityLink', 'mismatch', 'id');
    if (model.question === null) throw new ValidationError('HttpPersonalityLink', 'missing', 'question');
    fieldCount++;
    if (typeof model.question !== 'string') throw new ValidationError('HttpPersonalityLink', 'mismatch', 'question');
    if (model.answers === null) throw new ValidationError('HttpPersonalityLink', 'missing', 'answers');
    fieldCount++;
    if (typeof model.answers !== 'object' || !('length' in model.answers))
      throw new ValidationError('HttpPersonalityLink', 'mismatch', 'answers');
    for (let i = 0; i < model.answers.length; i++) {
      const answersElem = model.answers[i];
      this.HttpPersonalityLinkAnswerValidator(answersElem);
    }

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpPersonalityLink', 'too-many-fields', '');

    return true;
  }

  static AdminUpdatePersonalityLinkRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('AdminUpdatePersonalityLinkRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('AdminUpdatePersonalityLinkRequest', 'mismatch', '');

    if (model.personalityLink === null)
      throw new ValidationError('AdminUpdatePersonalityLinkRequest', 'missing', 'personalityLink');
    fieldCount++;
    this.HttpPersonalityLinkValidator(model.personalityLink);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('AdminUpdatePersonalityLinkRequest', 'too-many-fields', '');

    return true;
  }

  static HttpEventViewPrivateDetailsValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpEventViewPrivateDetails', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpEventViewPrivateDetails', 'mismatch', '');

    if (model.user1Approved === null)
      throw new ValidationError('HttpEventViewPrivateDetails', 'missing', 'user1Approved');
    fieldCount++;
    if (typeof model.user1Approved !== 'boolean')
      throw new ValidationError('HttpEventViewPrivateDetails', 'mismatch', 'user1Approved');
    if (model.user2Approved === null)
      throw new ValidationError('HttpEventViewPrivateDetails', 'missing', 'user2Approved');
    fieldCount++;
    if (typeof model.user2Approved !== 'boolean')
      throw new ValidationError('HttpEventViewPrivateDetails', 'mismatch', 'user2Approved');
    if (model.cancelled === null) throw new ValidationError('HttpEventViewPrivateDetails', 'missing', 'cancelled');
    fieldCount++;
    if (typeof model.cancelled !== 'boolean')
      throw new ValidationError('HttpEventViewPrivateDetails', 'mismatch', 'cancelled');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpEventViewPrivateDetails', 'too-many-fields', '');

    return true;
  }

  static FullDateValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('FullDate', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('FullDate', 'mismatch', '');

    if (model.year === null) throw new ValidationError('FullDate', 'missing', 'year');
    fieldCount++;
    if (typeof model.year !== 'number') throw new ValidationError('FullDate', 'mismatch', 'year');
    if (model.month === null) throw new ValidationError('FullDate', 'missing', 'month');
    fieldCount++;
    if (typeof model.month !== 'number') throw new ValidationError('FullDate', 'mismatch', 'month');
    if (model.day === null) throw new ValidationError('FullDate', 'missing', 'day');
    fieldCount++;
    if (typeof model.day !== 'number') throw new ValidationError('FullDate', 'mismatch', 'day');
    if (model.stamp === null) throw new ValidationError('FullDate', 'missing', 'stamp');
    fieldCount++;
    if (typeof model.stamp !== 'number') throw new ValidationError('FullDate', 'mismatch', 'stamp');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('FullDate', 'too-many-fields', '');

    return true;
  }

  static HttpAvatarValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpAvatar', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpAvatar', 'mismatch', '');

    if (model.id === null) throw new ValidationError('HttpAvatar', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('HttpAvatar', 'mismatch', 'id');
    if ('uri' in model) {
      fieldCount++;
      if (typeof model.uri !== 'string') throw new ValidationError('HttpAvatar', 'mismatch', 'uri');
    }
    if ('fileType' in model) {
      fieldCount++;
      if (typeof model.fileType !== 'string') throw new ValidationError('HttpAvatar', 'mismatch', 'fileType');
    }
    if ('dateCreated' in model) {
      fieldCount++;
      this.FullDateValidator(model.dateCreated);
    }

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('HttpAvatar', 'too-many-fields', '');

    return true;
  }

  static HttpEventViewPrivateRelationshipValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', '');

    if (model.chosen === null) throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'chosen');
    fieldCount++;
    if (typeof model.chosen !== 'boolean')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'chosen');
    if (model.ignored === null) throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'ignored');
    fieldCount++;
    if (typeof model.ignored !== 'boolean')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'ignored');
    if (model.relationshipId === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'relationshipId');
    fieldCount++;
    if (typeof model.relationshipId !== 'string')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'relationshipId');
    if (model.relationshipName === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'relationshipName');
    fieldCount++;
    if (typeof model.relationshipName !== 'string')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'relationshipName');
    if (model.relationshipAvatars === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'relationshipAvatars');
    fieldCount++;
    if (typeof model.relationshipAvatars !== 'object' || !('length' in model.relationshipAvatars))
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'relationshipAvatars');
    for (let i = 0; i < model.relationshipAvatars.length; i++) {
      const relationshipAvatarsElem = model.relationshipAvatars[i];
      this.HttpAvatarValidator(relationshipAvatarsElem);
    }
    if (model.user1Avatars === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'user1Avatars');
    fieldCount++;
    if (typeof model.user1Avatars !== 'object' || !('length' in model.user1Avatars))
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'user1Avatars');
    for (let i = 0; i < model.user1Avatars.length; i++) {
      const user1AvatarsElem = model.user1Avatars[i];
      this.HttpAvatarValidator(user1AvatarsElem);
    }
    if (model.user2Avatars === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'user2Avatars');
    fieldCount++;
    if (typeof model.user2Avatars !== 'object' || !('length' in model.user2Avatars))
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'user2Avatars');
    for (let i = 0; i < model.user2Avatars.length; i++) {
      const user2AvatarsElem = model.user2Avatars[i];
      this.HttpAvatarValidator(user2AvatarsElem);
    }
    if (model.matchPercent === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'matchPercent');
    fieldCount++;
    if (typeof model.matchPercent !== 'number')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'matchPercent');
    if (model.relationshipRank === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'relationshipRank');
    fieldCount++;
    if (typeof model.relationshipRank !== 'number')
      throw new ValidationError('HttpEventViewPrivateRelationship', 'mismatch', 'relationshipRank');
    if (model.createdDate === null)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'missing', 'createdDate');
    fieldCount++;
    this.FullDateValidator(model.createdDate);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpEventViewPrivateRelationship', 'too-many-fields', '');

    return true;
  }

  static HttpRelationshipDetailsPublicValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpRelationshipDetailsPublic', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', '');

    if ('aboutUs' in model) {
      fieldCount++;
      if (typeof model.aboutUs !== 'string')
        throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', 'aboutUs');
    }
    if ('avatars' in model) {
      fieldCount++;
      if (typeof model.avatars !== 'object' || !('length' in model.avatars))
        throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', 'avatars');
      for (let i = 0; i < model.avatars.length; i++) {
        const avatarsElem = model.avatars[i];
        this.HttpAvatarValidator(avatarsElem);
      }
    }
    if ('firstMeet' in model) {
      fieldCount++;
      if (typeof model.firstMeet !== 'string')
        throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', 'firstMeet');
    }
    if ('howLongTogether' in model) {
      fieldCount++;
      if (typeof model.howLongTogether !== 'string')
        throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', 'howLongTogether');
    }
    if (model.relationshipRank === null)
      throw new ValidationError('HttpRelationshipDetailsPublic', 'missing', 'relationshipRank');
    fieldCount++;
    if (typeof model.relationshipRank !== 'number')
      throw new ValidationError('HttpRelationshipDetailsPublic', 'mismatch', 'relationshipRank');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpRelationshipDetailsPublic', 'too-many-fields', '');

    return true;
  }

  static HttpUserPublicValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpUserPublic', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpUserPublic', 'mismatch', '');

    if (model.id === null) throw new ValidationError('HttpUserPublic', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('HttpUserPublic', 'mismatch', 'id');
    if (model.name === null) throw new ValidationError('HttpUserPublic', 'missing', 'name');
    fieldCount++;
    if (typeof model.name !== 'string') throw new ValidationError('HttpUserPublic', 'mismatch', 'name');
    if (model.createdDate === null) throw new ValidationError('HttpUserPublic', 'missing', 'createdDate');
    fieldCount++;
    this.FullDateValidator(model.createdDate);
    if (model.defaultAvatar === null) throw new ValidationError('HttpUserPublic', 'missing', 'defaultAvatar');
    fieldCount++;
    this.HttpAvatarValidator(model.defaultAvatar);

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('HttpUserPublic', 'too-many-fields', '');

    return true;
  }

  static HttpRelationshipPublicValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpRelationshipPublic', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpRelationshipPublic', 'mismatch', '');

    if (model.id === null) throw new ValidationError('HttpRelationshipPublic', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('HttpRelationshipPublic', 'mismatch', 'id');
    if (model.details === null) throw new ValidationError('HttpRelationshipPublic', 'missing', 'details');
    fieldCount++;
    this.HttpRelationshipDetailsPublicValidator(model.details);
    if (model.user1 === null) throw new ValidationError('HttpRelationshipPublic', 'missing', 'user1');
    fieldCount++;
    this.HttpUserPublicValidator(model.user1);
    if (model.user2 === null) throw new ValidationError('HttpRelationshipPublic', 'missing', 'user2');
    fieldCount++;
    this.HttpUserPublicValidator(model.user2);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpRelationshipPublic', 'too-many-fields', '');

    return true;
  }

  static HttpEventViewCommonLocationAddressValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpEventViewCommonLocationAddress', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', '');

    if ('fullAddress' in model) {
      fieldCount++;
      if (typeof model.fullAddress !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'fullAddress');
    }
    if ('street1' in model) {
      fieldCount++;
      if (typeof model.street1 !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'street1');
    }
    if ('street2' in model) {
      fieldCount++;
      if (typeof model.street2 !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'street2');
    }
    if ('city' in model) {
      fieldCount++;
      if (typeof model.city !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'city');
    }
    if ('state' in model) {
      fieldCount++;
      if (typeof model.state !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'state');
    }
    if ('zipcode' in model) {
      fieldCount++;
      if (typeof model.zipcode !== 'string')
        throw new ValidationError('HttpEventViewCommonLocationAddress', 'mismatch', 'zipcode');
    }

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpEventViewCommonLocationAddress', 'too-many-fields', '');

    return true;
  }

  static HttpEventViewCommonLocationValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpEventViewCommonLocation', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpEventViewCommonLocation', 'mismatch', '');

    if (model.locationName === null)
      throw new ValidationError('HttpEventViewCommonLocation', 'missing', 'locationName');
    fieldCount++;
    if (typeof model.locationName !== 'string')
      throw new ValidationError('HttpEventViewCommonLocation', 'mismatch', 'locationName');
    if ('placeId' in model) {
      fieldCount++;
      if (typeof model.placeId !== 'string')
        throw new ValidationError('HttpEventViewCommonLocation', 'mismatch', 'placeId');
    }
    if (model.eventImage === null) throw new ValidationError('HttpEventViewCommonLocation', 'missing', 'eventImage');
    fieldCount++;
    if (typeof model.eventImage !== 'string')
      throw new ValidationError('HttpEventViewCommonLocation', 'mismatch', 'eventImage');
    if (model.locationImage === null)
      throw new ValidationError('HttpEventViewCommonLocation', 'missing', 'locationImage');
    fieldCount++;
    if (typeof model.locationImage !== 'string')
      throw new ValidationError('HttpEventViewCommonLocation', 'mismatch', 'locationImage');
    if (model.locationAddress === null)
      throw new ValidationError('HttpEventViewCommonLocation', 'missing', 'locationAddress');
    fieldCount++;
    this.HttpEventViewCommonLocationAddressValidator(model.locationAddress);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpEventViewCommonLocation', 'too-many-fields', '');

    return true;
  }

  static FullTimeValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('FullTime', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('FullTime', 'mismatch', '');

    if (model.hour === null) throw new ValidationError('FullTime', 'missing', 'hour');
    fieldCount++;
    if (typeof model.hour !== 'number') throw new ValidationError('FullTime', 'mismatch', 'hour');
    if (model.minute === null) throw new ValidationError('FullTime', 'missing', 'minute');
    fieldCount++;
    if (typeof model.minute !== 'number') throw new ValidationError('FullTime', 'mismatch', 'minute');
    if (model.second === null) throw new ValidationError('FullTime', 'missing', 'second');
    fieldCount++;
    if (typeof model.second !== 'number') throw new ValidationError('FullTime', 'mismatch', 'second');
    if (model.stamp === null) throw new ValidationError('FullTime', 'missing', 'stamp');
    fieldCount++;
    if (typeof model.stamp !== 'number') throw new ValidationError('FullTime', 'mismatch', 'stamp');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('FullTime', 'too-many-fields', '');

    return true;
  }

  static HttpEventViewPrivateValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('HttpEventViewPrivate', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('HttpEventViewPrivate', 'mismatch', '');

    if (model.eventDetails === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'eventDetails');
    fieldCount++;
    this.HttpEventViewPrivateDetailsValidator(model.eventDetails);
    if (model.relationshipsInterested === null)
      throw new ValidationError('HttpEventViewPrivate', 'missing', 'relationshipsInterested');
    fieldCount++;
    if (typeof model.relationshipsInterested !== 'object' || !('length' in model.relationshipsInterested))
      throw new ValidationError('HttpEventViewPrivate', 'mismatch', 'relationshipsInterested');
    for (let i = 0; i < model.relationshipsInterested.length; i++) {
      const relationshipsInterestedElem = model.relationshipsInterested[i];
      this.HttpEventViewPrivateRelationshipValidator(relationshipsInterestedElem);
    }
    if (model.id === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'id');
    fieldCount++;
    if (typeof model.id !== 'string') throw new ValidationError('HttpEventViewPrivate', 'mismatch', 'id');
    if (model.relationship === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'relationship');
    fieldCount++;
    this.HttpRelationshipPublicValidator(model.relationship);
    if (model.category === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'category');
    fieldCount++;
    if (model.location === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'location');
    fieldCount++;
    this.HttpEventViewCommonLocationValidator(model.location);
    if (model.details === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'details');
    fieldCount++;
    if (typeof model.details !== 'string') throw new ValidationError('HttpEventViewPrivate', 'mismatch', 'details');
    if (model.date === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'date');
    fieldCount++;
    this.FullDateValidator(model.date);
    if (model.time === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'time');
    fieldCount++;
    this.FullTimeValidator(model.time);
    if (model.atOrAround === null) throw new ValidationError('HttpEventViewPrivate', 'missing', 'atOrAround');
    fieldCount++;
    if (model.atOrAround !== 'at' && model.atOrAround !== 'around')
      throw new ValidationError('HttpEventViewPrivate', 'mismatch', 'atOrAround');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('HttpEventViewPrivate', 'too-many-fields', '');

    return true;
  }

  static CreateEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('CreateEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('CreateEventRequest', 'mismatch', '');

    if (model.event === null) throw new ValidationError('CreateEventRequest', 'missing', 'event');
    fieldCount++;
    this.HttpEventViewPrivateValidator(model.event);

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('CreateEventRequest', 'too-many-fields', '');

    return true;
  }

  static EventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('EventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('EventRequest', 'mismatch', '');

    if (model.eventId === null) throw new ValidationError('EventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('EventRequest', 'mismatch', 'eventId');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('EventRequest', 'too-many-fields', '');

    return true;
  }

  static anyValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('any', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('any', 'mismatch', '');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('any', 'too-many-fields', '');

    return true;
  }

  static PatchItemValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('PatchItem', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('PatchItem', 'mismatch', '');

    if (model.op === null) throw new ValidationError('PatchItem', 'missing', 'op');
    fieldCount++;
    if (model.op !== 'remove' && model.op !== 'push' && model.op !== 'unset' && model.op !== 'set')
      throw new ValidationError('PatchItem', 'mismatch', 'op');
    if (model.path === null) throw new ValidationError('PatchItem', 'missing', 'path');
    fieldCount++;
    if (typeof model.path !== 'string') throw new ValidationError('PatchItem', 'mismatch', 'path');
    if (model.value === null) throw new ValidationError('PatchItem', 'missing', 'value');
    fieldCount++;
    this.anyValidator(model.value);

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('PatchItem', 'too-many-fields', '');

    return true;
  }

  static PatchEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('PatchEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('PatchEventRequest', 'mismatch', '');

    if (model.patches === null) throw new ValidationError('PatchEventRequest', 'missing', 'patches');
    fieldCount++;
    if (typeof model.patches !== 'object' || !('length' in model.patches))
      throw new ValidationError('PatchEventRequest', 'mismatch', 'patches');
    for (let i = 0; i < model.patches.length; i++) {
      const patchesElem = model.patches[i];
      this.PatchItemValidator(patchesElem);
    }
    if (model.eventId === null) throw new ValidationError('PatchEventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('PatchEventRequest', 'mismatch', 'eventId');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('PatchEventRequest', 'too-many-fields', '');

    return true;
  }

  static ApproveEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('ApproveEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('ApproveEventRequest', 'mismatch', '');

    if (model.approved === null) throw new ValidationError('ApproveEventRequest', 'missing', 'approved');
    fieldCount++;
    if (typeof model.approved !== 'boolean') throw new ValidationError('ApproveEventRequest', 'mismatch', 'approved');
    if (model.eventId === null) throw new ValidationError('ApproveEventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('ApproveEventRequest', 'mismatch', 'eventId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('ApproveEventRequest', 'too-many-fields', '');

    return true;
  }

  static EventSearchRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('EventSearchRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('EventSearchRequest', 'mismatch', '');

    if (model.minDistance === null) throw new ValidationError('EventSearchRequest', 'missing', 'minDistance');
    fieldCount++;
    if (typeof model.minDistance !== 'string')
      throw new ValidationError('EventSearchRequest', 'mismatch', 'minDistance');
    if (model.radius === null) throw new ValidationError('EventSearchRequest', 'missing', 'radius');
    fieldCount++;
    if (typeof model.radius !== 'string') throw new ValidationError('EventSearchRequest', 'mismatch', 'radius');
    if (model.lat === null) throw new ValidationError('EventSearchRequest', 'missing', 'lat');
    fieldCount++;
    if (typeof model.lat !== 'string') throw new ValidationError('EventSearchRequest', 'mismatch', 'lat');
    if (model.lng === null) throw new ValidationError('EventSearchRequest', 'missing', 'lng');
    fieldCount++;
    if (typeof model.lng !== 'string') throw new ValidationError('EventSearchRequest', 'mismatch', 'lng');
    if (model.page === null) throw new ValidationError('EventSearchRequest', 'missing', 'page');
    fieldCount++;
    if (typeof model.page !== 'string') throw new ValidationError('EventSearchRequest', 'mismatch', 'page');
    if (model.afterDateStamp === null) throw new ValidationError('EventSearchRequest', 'missing', 'afterDateStamp');
    fieldCount++;
    if (typeof model.afterDateStamp !== 'string')
      throw new ValidationError('EventSearchRequest', 'mismatch', 'afterDateStamp');
    if (model.beforeDateStamp === null) throw new ValidationError('EventSearchRequest', 'missing', 'beforeDateStamp');
    fieldCount++;
    if (typeof model.beforeDateStamp !== 'string')
      throw new ValidationError('EventSearchRequest', 'mismatch', 'beforeDateStamp');
    if (model.category === null) throw new ValidationError('EventSearchRequest', 'missing', 'category');
    fieldCount++;
    if (typeof model.category !== 'string') throw new ValidationError('EventSearchRequest', 'mismatch', 'category');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('EventSearchRequest', 'too-many-fields', '');

    return true;
  }

  static GetRelationshipRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('GetRelationshipRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('GetRelationshipRequest', 'mismatch', '');

    if (model.relationshipId === null) throw new ValidationError('GetRelationshipRequest', 'missing', 'relationshipId');
    fieldCount++;
    if (typeof model.relationshipId !== 'string')
      throw new ValidationError('GetRelationshipRequest', 'mismatch', 'relationshipId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('GetRelationshipRequest', 'too-many-fields', '');

    return true;
  }

  static PatchRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('PatchRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('PatchRequest', 'mismatch', '');

    if (model.patches === null) throw new ValidationError('PatchRequest', 'missing', 'patches');
    fieldCount++;
    if (typeof model.patches !== 'object' || !('length' in model.patches))
      throw new ValidationError('PatchRequest', 'mismatch', 'patches');
    for (let i = 0; i < model.patches.length; i++) {
      const patchesElem = model.patches[i];
      this.PatchItemValidator(patchesElem);
    }

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('PatchRequest', 'too-many-fields', '');

    return true;
  }

  static UploadAvatarRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('UploadAvatarRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('UploadAvatarRequest', 'mismatch', '');

    if (model.base64 === null) throw new ValidationError('UploadAvatarRequest', 'missing', 'base64');
    fieldCount++;
    if (typeof model.base64 !== 'string') throw new ValidationError('UploadAvatarRequest', 'mismatch', 'base64');
    if (model.fileType === null) throw new ValidationError('UploadAvatarRequest', 'missing', 'fileType');
    fieldCount++;
    if (typeof model.fileType !== 'string') throw new ValidationError('UploadAvatarRequest', 'mismatch', 'fileType');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('UploadAvatarRequest', 'too-many-fields', '');

    return true;
  }

  static DeleteAvatarRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('DeleteAvatarRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('DeleteAvatarRequest', 'mismatch', '');

    if (model.avatarId === null) throw new ValidationError('DeleteAvatarRequest', 'missing', 'avatarId');
    fieldCount++;
    if (typeof model.avatarId !== 'string') throw new ValidationError('DeleteAvatarRequest', 'mismatch', 'avatarId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('DeleteAvatarRequest', 'too-many-fields', '');

    return true;
  }

  static GetEventsByRelationshipRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('GetEventsByRelationshipRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('GetEventsByRelationshipRequest', 'mismatch', '');

    if (model.relationshipId === null)
      throw new ValidationError('GetEventsByRelationshipRequest', 'missing', 'relationshipId');
    fieldCount++;
    if (typeof model.relationshipId !== 'string')
      throw new ValidationError('GetEventsByRelationshipRequest', 'mismatch', 'relationshipId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('GetEventsByRelationshipRequest', 'too-many-fields', '');

    return true;
  }

  static InterestedInEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('InterestedInEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('InterestedInEventRequest', 'mismatch', '');

    if (model.eventId === null) throw new ValidationError('InterestedInEventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('InterestedInEventRequest', 'mismatch', 'eventId');
    if (model.maybe === null) throw new ValidationError('InterestedInEventRequest', 'missing', 'maybe');
    fieldCount++;
    if (typeof model.maybe !== 'boolean') throw new ValidationError('InterestedInEventRequest', 'mismatch', 'maybe');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('InterestedInEventRequest', 'too-many-fields', '');

    return true;
  }

  static DecideOnRelationshipRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('DecideOnRelationshipRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('DecideOnRelationshipRequest', 'mismatch', '');

    if (model.eventId === null) throw new ValidationError('DecideOnRelationshipRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string')
      throw new ValidationError('DecideOnRelationshipRequest', 'mismatch', 'eventId');
    if (model.relationshipId === null)
      throw new ValidationError('DecideOnRelationshipRequest', 'missing', 'relationshipId');
    fieldCount++;
    if (typeof model.relationshipId !== 'string')
      throw new ValidationError('DecideOnRelationshipRequest', 'mismatch', 'relationshipId');
    if (model.decision === null) throw new ValidationError('DecideOnRelationshipRequest', 'missing', 'decision');
    fieldCount++;
    if (model.decision !== 'clear' && model.decision !== 'ignore' && model.decision !== 'accept')
      throw new ValidationError('DecideOnRelationshipRequest', 'mismatch', 'decision');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('DecideOnRelationshipRequest', 'too-many-fields', '');

    return true;
  }

  static RateEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('RateEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('RateEventRequest', 'mismatch', '');

    if (model.eventId === null) throw new ValidationError('RateEventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('RateEventRequest', 'mismatch', 'eventId');
    if (model.locationRating === null) throw new ValidationError('RateEventRequest', 'missing', 'locationRating');
    fieldCount++;
    if (typeof model.locationRating !== 'number')
      throw new ValidationError('RateEventRequest', 'mismatch', 'locationRating');
    if (model.coupleRating === null) throw new ValidationError('RateEventRequest', 'missing', 'coupleRating');
    fieldCount++;
    if (typeof model.coupleRating !== 'number')
      throw new ValidationError('RateEventRequest', 'mismatch', 'coupleRating');
    if (model.wouldGoOutAgain === null) throw new ValidationError('RateEventRequest', 'missing', 'wouldGoOutAgain');
    fieldCount++;
    if (typeof model.wouldGoOutAgain !== 'boolean')
      throw new ValidationError('RateEventRequest', 'mismatch', 'wouldGoOutAgain');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('RateEventRequest', 'too-many-fields', '');

    return true;
  }

  static DismessRateEventRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('DismessRateEventRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('DismessRateEventRequest', 'mismatch', '');

    if (model.eventId === null) throw new ValidationError('DismessRateEventRequest', 'missing', 'eventId');
    fieldCount++;
    if (typeof model.eventId !== 'string') throw new ValidationError('DismessRateEventRequest', 'mismatch', 'eventId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('DismessRateEventRequest', 'too-many-fields', '');

    return true;
  }

  static RegisterRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('RegisterRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('RegisterRequest', 'mismatch', '');

    if (model.phone === null) throw new ValidationError('RegisterRequest', 'missing', 'phone');
    fieldCount++;
    if (typeof model.phone !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'phone');
    if (model.name === null) throw new ValidationError('RegisterRequest', 'missing', 'name');
    fieldCount++;
    if (typeof model.name !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'name');
    if (model.password === null) throw new ValidationError('RegisterRequest', 'missing', 'password');
    fieldCount++;
    if (typeof model.password !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'password');
    if (model.email === null) throw new ValidationError('RegisterRequest', 'missing', 'email');
    fieldCount++;
    if (typeof model.email !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'email');
    if (model.birthday === null) throw new ValidationError('RegisterRequest', 'missing', 'birthday');
    fieldCount++;
    if (typeof model.birthday !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'birthday');
    if (model.facebookAccessToken === null)
      throw new ValidationError('RegisterRequest', 'missing', 'facebookAccessToken');
    fieldCount++;
    if (typeof model.facebookAccessToken !== 'string')
      throw new ValidationError('RegisterRequest', 'mismatch', 'facebookAccessToken');
    if (model.facebookId === null) throw new ValidationError('RegisterRequest', 'missing', 'facebookId');
    fieldCount++;
    if (typeof model.facebookId !== 'string') throw new ValidationError('RegisterRequest', 'mismatch', 'facebookId');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('RegisterRequest', 'too-many-fields', '');

    return true;
  }

  static InviteSORequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('InviteSORequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('InviteSORequest', 'mismatch', '');

    if (model.phone === null) throw new ValidationError('InviteSORequest', 'missing', 'phone');
    fieldCount++;
    if (typeof model.phone !== 'string') throw new ValidationError('InviteSORequest', 'mismatch', 'phone');
    if (model.name === null) throw new ValidationError('InviteSORequest', 'missing', 'name');
    fieldCount++;
    if (typeof model.name !== 'string') throw new ValidationError('InviteSORequest', 'mismatch', 'name');
    if (model.email === null) throw new ValidationError('InviteSORequest', 'missing', 'email');
    fieldCount++;
    if (typeof model.email !== 'string') throw new ValidationError('InviteSORequest', 'mismatch', 'email');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('InviteSORequest', 'too-many-fields', '');

    return true;
  }

  static SOInvitedRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('SOInvitedRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('SOInvitedRequest', 'mismatch', '');

    if (model.relationshipConnectCode === null)
      throw new ValidationError('SOInvitedRequest', 'missing', 'relationshipConnectCode');
    fieldCount++;
    if (typeof model.relationshipConnectCode !== 'string')
      throw new ValidationError('SOInvitedRequest', 'mismatch', 'relationshipConnectCode');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('SOInvitedRequest', 'too-many-fields', '');

    return true;
  }

  static RegisterSORequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('RegisterSORequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('RegisterSORequest', 'mismatch', '');

    if (model.relationshipConnectCode === null)
      throw new ValidationError('RegisterSORequest', 'missing', 'relationshipConnectCode');
    fieldCount++;
    if (typeof model.relationshipConnectCode !== 'string')
      throw new ValidationError('RegisterSORequest', 'mismatch', 'relationshipConnectCode');
    if (model.userId === null) throw new ValidationError('RegisterSORequest', 'missing', 'userId');
    fieldCount++;
    if (typeof model.userId !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'userId');
    if (model.phone === null) throw new ValidationError('RegisterSORequest', 'missing', 'phone');
    fieldCount++;
    if (typeof model.phone !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'phone');
    if (model.name === null) throw new ValidationError('RegisterSORequest', 'missing', 'name');
    fieldCount++;
    if (typeof model.name !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'name');
    if (model.password === null) throw new ValidationError('RegisterSORequest', 'missing', 'password');
    fieldCount++;
    if (typeof model.password !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'password');
    if (model.email === null) throw new ValidationError('RegisterSORequest', 'missing', 'email');
    fieldCount++;
    if (typeof model.email !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'email');
    if (model.birthday === null) throw new ValidationError('RegisterSORequest', 'missing', 'birthday');
    fieldCount++;
    if (typeof model.birthday !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'birthday');
    if (model.facebookAccessToken === null)
      throw new ValidationError('RegisterSORequest', 'missing', 'facebookAccessToken');
    fieldCount++;
    if (typeof model.facebookAccessToken !== 'string')
      throw new ValidationError('RegisterSORequest', 'mismatch', 'facebookAccessToken');
    if (model.facebookId === null) throw new ValidationError('RegisterSORequest', 'missing', 'facebookId');
    fieldCount++;
    if (typeof model.facebookId !== 'string') throw new ValidationError('RegisterSORequest', 'mismatch', 'facebookId');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('RegisterSORequest', 'too-many-fields', '');

    return true;
  }

  static LoginRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('LoginRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('LoginRequest', 'mismatch', '');

    if ('password' in model) {
      fieldCount++;
      if (typeof model.password !== 'string') throw new ValidationError('LoginRequest', 'mismatch', 'password');
    }
    if ('email' in model) {
      fieldCount++;
      if (typeof model.email !== 'string') throw new ValidationError('LoginRequest', 'mismatch', 'email');
    }
    if ('facebookAccessToken' in model) {
      fieldCount++;
      if (typeof model.facebookAccessToken !== 'string')
        throw new ValidationError('LoginRequest', 'mismatch', 'facebookAccessToken');
    }
    if ('facebookId' in model) {
      fieldCount++;
      if (typeof model.facebookId !== 'string') throw new ValidationError('LoginRequest', 'mismatch', 'facebookId');
    }

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('LoginRequest', 'too-many-fields', '');

    return true;
  }

  static GetUserPublicRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('GetUserPublicRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('GetUserPublicRequest', 'mismatch', '');

    if (model.userId === null) throw new ValidationError('GetUserPublicRequest', 'missing', 'userId');
    fieldCount++;
    if (typeof model.userId !== 'string') throw new ValidationError('GetUserPublicRequest', 'mismatch', 'userId');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('GetUserPublicRequest', 'too-many-fields', '');

    return true;
  }

  static GetUserRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('GetUserRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('GetUserRequest', 'mismatch', '');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('GetUserRequest', 'too-many-fields', '');

    return true;
  }

  static ChangePersonalityLinkPublicRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('ChangePersonalityLinkPublicRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('ChangePersonalityLinkPublicRequest', 'mismatch', '');

    if (model.personalityLinkId === null)
      throw new ValidationError('ChangePersonalityLinkPublicRequest', 'missing', 'personalityLinkId');
    fieldCount++;
    if (typeof model.personalityLinkId !== 'string')
      throw new ValidationError('ChangePersonalityLinkPublicRequest', 'mismatch', 'personalityLinkId');
    if (model.public === null) throw new ValidationError('ChangePersonalityLinkPublicRequest', 'missing', 'public');
    fieldCount++;
    if (typeof model.public !== 'boolean')
      throw new ValidationError('ChangePersonalityLinkPublicRequest', 'mismatch', 'public');

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('ChangePersonalityLinkPublicRequest', 'too-many-fields', '');

    return true;
  }

  static answersValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('answers', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('answers', 'mismatch', '');

    if (model.answerId === null) throw new ValidationError('answers', 'missing', 'answerId');
    fieldCount++;
    if (typeof model.answerId !== 'string') throw new ValidationError('answers', 'mismatch', 'answerId');
    if (model.decision === null) throw new ValidationError('answers', 'missing', 'decision');
    fieldCount++;
    if (model.decision !== 'positive' && model.decision !== 'negative')
      throw new ValidationError('answers', 'mismatch', 'decision');

    if (Object.keys(model).length !== fieldCount) throw new ValidationError('answers', 'too-many-fields', '');

    return true;
  }

  static ChoosePersonalityLinkRequestValidator(model: any): boolean {
    let fieldCount = 0;
    if (model === null) throw new ValidationError('ChoosePersonalityLinkRequest', 'missing', '');
    if (typeof model !== 'object') throw new ValidationError('ChoosePersonalityLinkRequest', 'mismatch', '');

    if (model.personalityLinkId === null)
      throw new ValidationError('ChoosePersonalityLinkRequest', 'missing', 'personalityLinkId');
    fieldCount++;
    if (typeof model.personalityLinkId !== 'string')
      throw new ValidationError('ChoosePersonalityLinkRequest', 'mismatch', 'personalityLinkId');
    if (model.answers === null) throw new ValidationError('ChoosePersonalityLinkRequest', 'missing', 'answers');
    fieldCount++;
    if (typeof model.answers !== 'object' || !('length' in model.answers))
      throw new ValidationError('ChoosePersonalityLinkRequest', 'mismatch', 'answers');
    for (let i = 0; i < model.answers.length; i++) {
      const answersElem = model.answers[i];
      this.answersValidator(answersElem);
    }

    if (Object.keys(model).length !== fieldCount)
      throw new ValidationError('ChoosePersonalityLinkRequest', 'too-many-fields', '');

    return true;
  }
}
