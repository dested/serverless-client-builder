"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ejs = require("ejs");
const fs = require("fs");
const prettier = require("prettier");
const ts_simple_ast_1 = require("ts-simple-ast");
const manageSymbols_1 = require("./manageSymbols");
function processFile(apiPath, outputFile, yml) {
    const tsConfigFilePath = apiPath + 'tsconfig.json';
    const project = new ts_simple_ast_1.default({
        tsConfigFilePath,
    });
    const symbolManager = new manageSymbols_1.ManageSymbols();
    const controllerDataItems = [];
    for (const sourceFile of project.getSourceFiles()) {
        for (const classDeclaration of sourceFile.getDescendantsOfKind(ts_simple_ast_1.SyntaxKind.ClassDeclaration)) {
            if (classDeclaration.getDecorators().length > 0 &&
                classDeclaration.getDecorators()[0].getName() === 'controller') {
                const controllerName = classDeclaration
                    .getDecorators()[0]
                    .getArguments()[0]
                    .getText();
                const controllerData = { name: eval(controllerName), methods: [], events: [] };
                controllerDataItems.push(controllerData);
                for (const declaration of classDeclaration.getMethods()) {
                    if (declaration.getDecorator('request')) {
                        const name = declaration.getName();
                        const decorator = declaration.getDecorator('request');
                        const method = eval(decorator.getArguments()[0].getText());
                        const path = eval(decorator.getArguments()[1].getText());
                        const options = [];
                        if (decorator.getArguments()[2]) {
                            const text = decorator.getArguments()[2].getText();
                            const requestOptions = eval('(' + text + ')');
                            if (requestOptions) {
                                for (const key of Object.keys(requestOptions)) {
                                    options.push({ key, value: requestOptions[key] });
                                }
                            }
                        }
                        controllerData.methods.push({
                            controllerName: controllerData.name,
                            name,
                            method,
                            path,
                            options,
                            declaration,
                        });
                    }
                    if (declaration.getDecorator('event')) {
                        const methodName = declaration.getName();
                        const decorator = declaration.getDecorator('event');
                        const rate = eval(decorator.getArguments()[0].getText());
                        controllerData.events.push({
                            controllerName: controllerData.name,
                            name: methodName,
                            rate,
                            declaration,
                        });
                    }
                }
            }
        }
    }
    if (yml) {
        const header = fs.readFileSync(apiPath + 'serverless-header.yml', { encoding: 'utf8' });
        let bottom = '';
        for (const controllerDataItem of controllerDataItems) {
            for (const method of controllerDataItem.methods) {
                bottom += `
  ${method.name}:
    handler: handler.${controllerDataItem.name}_${method.name}
    ${method.options.map(a => `${a.key}: ${a.value}`).join('\r\n    ')}
    events:
      - http:
          path: ${method.path}
          method: ${method.method}
          cors: true`;
            }
            for (const event of controllerDataItem.events) {
                bottom += `
  ${event.name}:
    handler: handler.${controllerDataItem.name}_${event.name}
    events:
      - schedule: ${event.rate}`;
            }
        }
        const disclaimer = '# This file was generated by https://github.com/dested/serverless-client-builder\r\n';
        fs.writeFileSync(apiPath + 'serverless.yml', disclaimer + header + bottom, { encoding: 'utf8' });
        console.log('Wrote yml file');
        return;
    }
    for (const controllerDataItem of controllerDataItems) {
        for (const method of controllerDataItem.methods) {
            const funcName = method.name;
            const funcNode = method.declaration;
            assert(funcNode.getParameters().length === 1, 'The export must only have one parameter');
            const eventArg = funcNode.getParameters()[0].getType();
            assert(eventArg.getSymbol().getName() === 'RequestEvent', 'RequestEvent argument must be a generic event class');
            const typeArgument = eventArg.getTypeArguments()[0];
            let requestName;
            if (typeArgument.getText() !== 'void') {
                symbolManager.addSymbol(typeArgument);
                requestName = typeArgument.getSymbol().getName();
            }
            else {
                requestName = 'void';
            }
            const returnType = funcNode.getReturnType();
            assert(returnType.getSymbol().getName() === 'Promise', 'Return type must must be a promise');
            const returnTypeArgument = returnType.getTypeArguments()[0];
            assert(returnTypeArgument.getSymbol().getName() === 'HttpResponse', 'Return type must must be a promise of HttpResponse');
            const httpResponseTypeArgument = returnTypeArgument.getTypeArguments()[0];
            const httpResponseErrorArgument = returnTypeArgument.getTypeArguments()[1];
            const errorTypes = [];
            if (httpResponseErrorArgument.compilerType.intrinsicName !== 'undefined') {
                if (httpResponseErrorArgument.getUnionTypes().length === 0) {
                    errorTypes.push(httpResponseErrorArgument.getApparentType().compilerType.getSymbol());
                }
                else {
                    for (const unionType of httpResponseErrorArgument.getUnionTypes()) {
                        errorTypes.push(unionType.compilerType.getSymbol());
                    }
                }
            }
            symbolManager.addSymbol(httpResponseTypeArgument);
            addFunction(method.controllerName, funcName, requestName, httpResponseTypeArgument.getSymbol().getName(), errorTypes, '/' + method.path, method.method);
        }
    }
    let js = ejs.render(fs.readFileSync(require.resolve('./template.ejs'), { encoding: 'utf8' }), {
        interfaces: symbolManager.symbols.map(a => getSource(a)),
        controllers,
    }, { escape: e => e });
    const prettierFile = apiPath + '.prettierrc';
    const prettierOptions = readJson(prettierFile);
    if (prettierOptions) {
        js = prettier.format(js, prettierOptions);
    }
    // console.log(js);
    fs.writeFileSync(outputFile, js, { encoding: 'utf8' });
}
exports.processFile = processFile;
function assert(thing, error) {
    if (!thing) {
        throw error;
    }
}
const readJson = (path) => {
    if (fs.existsSync(path)) {
        console.log('exists');
        return JSON.parse(fs.readFileSync(path, { encoding: 'utf8' }));
    }
    console.log('no exists');
    return null;
};
const controllers = [];
function getSourceWithoutStatusCode(a) {
    const source = getSource(a, false);
    return source.replace(/statusCode\s*:\s*\d+,?;?/g, '');
}
function addFunction(controllerName, name, requestType, returnType, errorTypes, url, method) {
    const errorCode = errorTypes.map(a => a.members.get('statusCode').valueDeclaration.type.literal.text);
    const handleType = `{200:(result:${returnType})=>TPromise,500:(result:string)=>void,${errorTypes
        .map(a => {
        const statusCode = a.members.get('statusCode').valueDeclaration.type.literal.text;
        const source = getSourceWithoutStatusCode(a);
        return `${statusCode}:(result:${source})=>void`;
    })
        .join(',')}}`;
    let controller = controllers.find(a => a.controllerName === controllerName);
    if (!controller) {
        controller = { controllerName, functions: [] };
        controllers.push(controller);
    }
    controller.functions.push({
        name,
        handleType,
        requestType,
        returnType,
        url,
        method,
        errorCode,
    });
}
function getSource(symbol, addExport = true) {
    return symbol.declarations
        .map(a => {
        let str = a.getText();
        if (addExport && str.indexOf('export') === -1) {
            str = 'export ' + str;
        }
        return str;
    })
        .join('\n');
}
//# sourceMappingURL=data:application/json;base64,